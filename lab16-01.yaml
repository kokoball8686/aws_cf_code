Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  LatestAmiId:
    Description: (DO NOT CHANGE)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.60.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: VPC1

  InternetGateway1:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway1

  InternetGatewayAttachment1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway1
      VpcId: !Ref VPC1

  VPC2:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.50.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: VPC2

  InternetGateway2:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway2

  InternetGatewayAttachment2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway2
      VpcId: !Ref VPC2

  RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: RouteTable1

  DefaultRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment1
    Properties:
      RouteTableId: !Ref RouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.60.0.0/24
      Tags:
        - Key: Name
          Value: Subnet1

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable1
      SubnetId: !Ref Subnet1

  RouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: RouteTable2

  Route2:
    Type: AWS::EC2::Route
    DependsOn: Instance1
    Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: 10.50.0.0/16
      InstanceId: !Ref Instance1

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.60.1.0/24
      Tags:
        - Key: Name
          Value: Subnet2

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable2
      SubnetId: !Ref Subnet2

  Instance1ENIEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
        SubnetId: !Ref Subnet1
        Description: Instance1 eth0
        GroupSet:
        - !Ref SG1
        PrivateIpAddress: 10.60.0.100
        SourceDestCheck: false
        Tags:
            - Key: Name
              Value: Instance1ENIEth0

  VPCEIP1:
      Type: AWS::EC2::EIP
      Properties:
          Domain: vpc

  VPCAssociateEIP1:
      Type: AWS::EC2::EIPAssociation
      Properties:
          AllocationId: !GetAtt VPCEIP1.AllocationId
          NetworkInterfaceId: !Ref Instance1ENIEth0

  VPC2VPNGW:
    Type: AWS::EC2::VPNGateway
    Properties:
        Type: ipsec.1
        Tags:
          - Key: Name
            Value: VPC2VPNGW

  VPC2AttachVPNGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
        VpcId:
            Ref: VPC2
        VpnGatewayId:
            Ref: VPC2VPNGW

  VPC2CGW:
    Type: "AWS::EC2::CustomerGateway"
    DependsOn: VPCEIP1
    Properties:
        Type: ipsec.1
        BgpAsn: 65000
        IpAddress:
            Ref: VPCEIP1
        Tags:
          - Key: Name
            Value: VPC2CGW

  VPCAWSSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
        VpcId:
              Ref: VPC2
        Tags:
          - Key: Name
            Value: VPCAWSSubnetRouteTable

  VPCAWSInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway2
    Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
            Ref: InternetGateway2
        RouteTableId:
            Ref: VPCAWSSubnetRouteTable

  VPCAWSSubnet:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref VPC2
        CidrBlock: 10.50.1.0/24
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        Tags:
          - Key: Name
            Value: VPCAWSSubnet

  VPCAWSSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId:
            Ref: VPCAWSSubnetRouteTable
        SubnetId:
            Ref: VPCAWSSubnet

  VPCAWSVpnConnection:
    Type: "AWS::EC2::VPNConnection"
    Properties:
        Type: ipsec.1
        StaticRoutesOnly: true
        CustomerGatewayId:
            !Ref VPC2CGW
        VpnGatewayId:
            !Ref VPC2VPNGW
        VpnTunnelOptionsSpecifications:
            - PreSharedKey: cloudneta
        Tags:
            - Key: Name
              Value: VPCAWSVpnConnection

  VPCAWSVpnConnectionRoute:
    Type: "AWS::EC2::VPNConnectionRoute"
    Properties:
        DestinationCidrBlock: 10.60.0.0/16
        VpnConnectionId:
            !Ref VPCAWSVpnConnection

  VPNAWSGatewayRoutePropagation:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    DependsOn: VPCAWSVpnConnection
    Properties:
      RouteTableIds:
      - !Ref VPCAWSSubnetRouteTable
      VpnGatewayId: !Ref VPC2VPNGW

  Instance1:
    Type: AWS::EC2::Instance
    DependsOn: VPCAssociateEIP1
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Instance1
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref Instance1ENIEth0
          DeviceIndex: 0
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname IDC-CGW
          yum -y install tcpdump openswan
          cat <<EOF>> /etc/sysctl.conf
          net.ipv4.ip_forward=1
          net.ipv4.conf.all.accept_redirects = 0
          net.ipv4.conf.all.send_redirects = 0
          net.ipv4.conf.default.send_redirects = 0
          net.ipv4.conf.eth0.send_redirects = 0
          net.ipv4.conf.default.accept_redirects = 0
          net.ipv4.conf.eth0.accept_redirects = 0
          net.ipv4.conf.ip_vti0.rp_filter = 0
          net.ipv4.conf.eth0.rp_filter = 0
          net.ipv4.conf.default.rp_filter = 0
          net.ipv4.conf.all.rp_filter = 0
          EOF
          sysctl -p /etc/sysctl.conf
          curl -o /etc/ipsec.d/vpnconfig.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter6/6_lab_s2s-vpnconfig.sh
          chmod +x /etc/ipsec.d/vpnconfig.sh

  Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Instance2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref Subnet2
          GroupSet:
          - !Ref SG2
          PrivateIpAddress: 10.60.1.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "qwe123" | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          service sshd restart
          hostnamectl --static set-hostname IDC-EC2

  Instance3:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Instance3
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref VPCAWSSubnet
          GroupSet:
          - !Ref SG3
          PrivateIpAddress: 10.50.1.100
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname AWS-EC2

  SG1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: VPC1-IDC-CGW-SG
      Tags:
      - Key : Name
        Value : SG1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '4500'
        ToPort: '4500'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  SG2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: VPC1-IDC-EC2-SG
      Tags:
      - Key : Name
        Value : SG2
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  SG3:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC2
      GroupDescription: VPC2-AWS-EC2-SG
      Tags:
      - Key : Name
        Value : SG3
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

Outputs:
  VPNGWInstanceEIP:
    Description: Elastic IP assigned to VPNGW-Instance eth0 interface
    Value: !GetAtt Instance1.PublicIp
  AWSInstancePublic:
    Description: Public IP assigned to AWS-Instance eth0 interface
    Value: !GetAtt Instance3.PublicIp
